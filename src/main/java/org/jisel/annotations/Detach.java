/**
 * Copyright (c) 2022 Mohamed Ashraf Bayor
 * <p>
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * <p>
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * <p>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.jisel.annotations;

import java.lang.annotation.ElementType;
import java.lang.annotation.Repeatable;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import static org.jisel.generator.StringGenerator.EMPTY_STRING;

/**
 * // TODO jdoc
 * // can be used only by itself -> eqvlnt of @DetachAll
 * Annotation to be applied on top of a class, interface or record, which is implementing or extending a sealed interface generated by Jisel.<br><br>
 * Expects 2 arguments:<br><br>
 * <b>profiles</b>: OPTIONAL - array of String values corresponding to the list of profiles whose generated sealed interfaces are
 * implemented by the annotated class, interface or record.<br>
 * If not provided or empty, the annotated class, interface or record will be added to the permits list of the generated top-level parent sealed interface.<br><br>
 * <b>largeInterface</b>: <u>MANDATORY</u> - <i>.class</i> representation of the large interface. That would be the <b>&#60;LargeInterfaceSimpleName&#62;</b> as seen in
 * the sealed interface name convention, followed by "<i>.class</i>".<br>
 */
@Retention(RetentionPolicy.SOURCE)
@Target({ElementType.TYPE})
@Repeatable(Detach.Detachs.class)
public @interface Detach {

    String[] value() default EMPTY_STRING; // alias for profiles = all geberated profils / rename not set / supermethods = true

    /**
     * <i>Not Required</i> - array of String values, each one referring to any of the profiles names provided through the &#64;SealFor annotation in the large interface definition.<br>
     * If not provided or empty, the annotated class, interface or record will be added to the permits list of the generated top-level parent sealed interface.<br>
     * Also, the provided profile attribute value array MUST contain one of the profiles defined in the large interface definition using &#64;SealFor. If not,
     * the specified incorrect profiles will be ignored and an informational message regarding the incorrect profiles will be printed during compilation.<br>
     *
     * @return array of profiles names
     */
    String[] profiles() default EMPTY_STRING;

    String[] rename() default EMPTY_STRING; // USELESS IF PROFILES NOT SPECIFIED -> display as wrnng msg

    boolean superMethods() default true;

    /**
     * Internal annotation allowing &#64;Detach to be repeatable
     */
    @Retention(RetentionPolicy.SOURCE)
    @Target(ElementType.TYPE)
    @interface Detachs {
        /**
         * array attribute allowing &#64;{@link Detach} to be repeatable
         *
         * @return array of &#64;AddTo instances
         */
        Detach[] value();
    }
}